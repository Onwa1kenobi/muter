# Ruby CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/ruby/ for more details
#
version: 2.1

jobs:
  build:
    docker:
      - image: cirrusci/flutter
    working_directory: ~/code
    steps:
      - checkout
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}

      - run:
          name: Install bundler 2
          command: |
            sudo gem install bundler -v 2.1.4

      - run: bundle check || bundle install --path vendor/bundle

      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Retrieve Evironment Variables
          command: |
            cd android
            echo $SERVICE_ACCOUNT_JSON | base64 -d > app/service-account.json
            echo $GOOGLE_PLAY_UPLOAD_KEY | base64 -d > app/muter_keystore.jks
            echo $KEY_PROPERTIES | base64 -d > key.properties

      - run: flutter doctor

      - run:
          name: Run Tests
          command: flutter test

      - run:
          name: Build Production flavor App Bundle
          command: |
            if [[ "${CIRCLE_BRANCH}" != "develop" && "${CIRCLE_BRANCH}" != "staging" && "${CIRCLE_BRANCH}" != "master" ]]
            then
              flutter build appbundle --flavor prod
            fi
            
      - run:
          name: Publish Application Bundle for Internal Sharing to Play Store
          command: |
            if [[ "${CIRCLE_BRANCH}" != "develop" && "${CIRCLE_BRANCH}" != "staging" && "${CIRCLE_BRANCH}" != "master" ]]
            then
              cd android
              echo `date +%s`
              ./gradlew uploadProdReleasePrivateBundle --artifact-dir ../build/app/outputs/bundle/prodRelease
              echo `date +%s`
              ls
              cd ../build/app/outputs/internal-sharing/bundle/prodRelease
              ls
              URL="hello"
              filenames=`ls ./*.json`
              for eachfile in $filenames
              do
                URL=`jq '.name' $eachfile`
              done
              echo $url
            fi
            
      - run:
          name: Send Success Slack Notification
          command: |
            if [[ "${CIRCLE_BRANCH}" != "develop" && "${CIRCLE_BRANCH}" != "staging" && "${CIRCLE_BRANCH}" != "master" ]]
            then
              cd android
              rm Gemfile.lock
              bundle update --all
              bundle exec fastlane android_success_notification
            fi

  deploy-alpha:
    docker:
      - image: cirrusci/flutter
    working_directory: ~/code
    steps:
      - checkout
      - run:
          name: Retrieve Evironment Variables
          command: |
            cd android
            echo $SERVICE_ACCOUNT_JSON | base64 -d > app/service-account.json
            echo $GOOGLE_PLAY_UPLOAD_KEY | base64 -d > app/muter_keystore.jks
            echo $KEY_PROPERTIES | base64 -d > key.properties
      - run:
          name: Approve SDK Licenses
          # Captures SIGPIPE 141 error but still allow repeating "y" to accept all licenses
          command: yes | sdkmanager --licenses || if [ $? -ne '141' ]; then exit $?; fi;
      - run:
          name: Build Production App Bundle
          command: flutter build appbundle --flavor prod
      - run:
          name: Publish Application Bundle to Play Store 'alpha' track
          command: |
            cd android
            ./gradlew publishProdReleaseBundle
      - run:
          name: Send Success Slack Notification
          command: |
            cd android
            rm Gemfile.lock
            bundle update --all
            bundle exec fastlane android_success_notification

  deploy-beta:
    docker:
      - image: cirrusci/flutter
    working_directory: ~/code
    steps:
      - checkout
      - run:
          name: Retrieve Evironment Variables
          command: |
            cd android
            echo $SERVICE_ACCOUNT_JSON | base64 -d > app/service-account.json
      - run:
          name: Promote 'alpha' build to 'beta' track
          command: |
            cd android
            ./gradlew promoteArtifact \
              --from-track alpha --promote-track beta
      - run:
          name: Send Success Slack Notification
          command: |
            cd android
            rm Gemfile.lock
            bundle update --all
            bundle exec fastlane android_success_notification

  deploy-release:
    docker:
      - image: cirrusci/flutter
    working_directory: ~/code
    steps:
      - checkout
      - run:
          name: Retrieve Evironment Variables
          command: |
            cd android
            echo $SERVICE_ACCOUNT_JSON | base64 -d > app/service-account.json
            echo $GOOGLE_PLAY_UPLOAD_KEY | base64 -d > app/muter_keystore.jks
            echo $KEY_PROPERTIES | base64 -d > key.properties
      - run:
          name: Approve SDK Licenses
          # Captures SIGPIPE 141 error but still allow repeating "y" to accept all licenses
          command: yes | sdkmanager --licenses || if [ $? -ne '141' ]; then exit $?; fi;
      - run:
          name: Build Production App Bundle
          command: flutter build appbundle --flavor prod
      - run:
          name: Publish Application Bundle to Play Store 'internal' track
          command: |
            cd android
            ./gradlew publishProdReleaseBundle
      - run:
          name: Send Success Slack Notification
          command: |
            cd android
            rm Gemfile.lock
            bundle update --all
            bundle exec fastlane android_success_notification

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy-alpha:
          requires:
            - build
          filters:
            branches:
              only: develop
      - deploy-beta:
          requires:
            - build
          filters:
            branches:
              only: staging
      - deploy-release:
          requires:
            - build
          filters:
            branches:
              only: master # List of branches for CI to build. { - /feature-.*/ to use regex }